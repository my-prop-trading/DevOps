name: CI/CD Main Pipeline

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      service_type:
        required: true
        type: string
      build_folder:
        required: true
        type: string
      repository_name:
        required: true
        type: string
      release_version:
        required: false
        type: string
      image_name:
        required: true
        type: string
      image:
        required: false
        type: string
        default: ubuntu-latest

    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      AUTH_TOKEN:
        required: true
      TELEGRAM_NOTIFICATION_TOKEN:
        required: false
      TELEGRAM_GITHAB_CHAT_ID:
        required: false

#-------------- TEST RUST ----------------#
jobs:
  test-rust:
    if: ${{ inputs.language == 'rust' && github.event_name != 'release' }}
    runs-on: ${{ inputs.image }}
    name: "[RUST] Test code"
    outputs:
      rust-status: ${{ job.status }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
      - run: openssl version  

      - name: Start cargo test
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: test

#-------------- TEST C# ----------------#
  test-csharp:
    if: ${{ inputs.language == 'csharp' && github.event_name != 'release' }}
    runs-on: ${{ inputs.image }}
    name: "[C#] Test code"
    outputs:
      csharp-status: ${{ job.status }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.*'

      - name: Start csharp test
        run: |
          dotnet build
          dotnet test

#-------------- Send ERROR test notification ----------------#
  notify-telegram-test-error:
    needs: [test-rust, test-csharp]
    runs-on: ${{ inputs.image }}
    name: "Send ERROR test notification"
    if: failure()
    steps:
      - name: Send test error notification
        run: |
          user="Triggered by: ${{ github.actor }}"
          reason="Last commit: ${{ github.event.head_commit.message }}"
          date="Date: $(date -d "+2 hours" +"%d.%m.%Y %H:%M:%S")"
          pipeline_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
          # send Telegram notification:
          curl --request POST --header "Content-Type: application/json" \
            --data "{\"text\":\"[${{ inputs.language }}] Test error:\n\n>>>  ${{ inputs.repository_name }}\n\n $user\n $reason\n $date\n\n Please check action here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFICATION_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_GITHAB_CHAT_ID }}"

#-------------- BUILD RUST ----------------#
  build-rust:
    if: ${{ inputs.language == 'rust' && github.event_name == 'release' && github.event.action == 'published' }}
    runs-on: ${{ inputs.image }}
    name: "[RUST] Build code"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # - name: Get release version
      #   id: get_version
      #   run: echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV

      - name: Update version in Cargo.toml
        run: sed -i -e 's/^version = .*/version = "${{ inputs.release_version }}"/' Cargo.toml && cat Cargo.toml

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
      - run: openssl version

      # Install dependencies
      - run: sudo apt update
        continue-on-error: true
      - run: sudo apt install -y build-essential libglib2.0-dev pkg-config libssl-dev libgtk-3-dev
      - run: sudo apt update && sudo apt upgrade -y
        continue-on-error: true
      - run: sudo apt-get install javascriptcoregtk-4.1 libsoup-3.0 webkit2gtk-4.1 -y

      # - name: Cache Rust dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-

      - name: Build project
        run: cargo build --release

      # - name: Docker login
      #   env:
      #     DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
      #     DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
      #   run: |          
      #     echo "$DOCKER_PASS" | docker login --username "$DOCKER_USER" --password-stdin   
          
      # - name: Docker Build and Publish
      #   run: |          
      #     docker build -t ${{ inputs.image_name }}:${{ env.VERSION }} .
      #     docker push ${{ inputs.image_name }}:${{ env.VERSION }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: docker.io/${{ inputs.image_name }}:${{ inputs.release_version }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: SUMMARY
        run: |
          echo "Docker image:" >> $GITHUB_STEP_SUMMARY
          echo "${{ inputs.image_name }}:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          
  #-------------- BUILD C# ----------------#
  build-csharp:
    if: ${{ inputs.language == 'csharp' && github.event_name == 'release' && github.event.action == 'published' }}
    runs-on: ${{ inputs.image }}
    name: "[C#] Build code"
    steps:
      - uses: actions/checkout@v4
      
      - name: Get release version
        id: get_version
        run: echo ::set-output name=VERSION::${{ inputs.release_version }}
          
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.*
          source-url: https://nuget.pkg.github.com/my-prop-trading/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
  
      # - name: Restore
      #   run: dotnet restore
      #   continue-on-error: true
  
      # - name: Build dotnet service
      #   run: dotnet build --no-restore --configuration Release /p:AssemblyVersion=${{ inputs.release_version }}
  
      # - name: Publish dotnet service
      #   run: dotnet publish ./${{ inputs.repository_name }}/${{ inputs.repository_name }}.csproj --configuration Release /p:AssemblyVersion=${{ inputs.release_version }} --output ./publish-api
  
      # - name: Check service dir
      #   run: ls ./publish-api
  
      # - id: string
      #   uses: ASzc/change-string-case-action@v1
      #   with:
      #     string: ${{ inputs.repository_name }}
          
      # - name: Publish image azure
      #   uses: docker/build-push-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     path: ./publish-api
      #     registry: docker.io
      #     repository: myproptrading/${{ steps.string.outputs.lowercase }}
      #     tag_with_ref: true

      - name: Restore and Build dotnet service
        run: |
          dotnet restore
          dotnet build --no-restore --configuration Release /p:AssemblyVersion=${{ inputs.release_version }}
          
      - name: Publish dotnet service
        run: dotnet publish ./src/${{ inputs.build_folder }}/${{ inputs.build_folder }}.csproj --configuration Release /p:AssemblyVersion=${{ inputs.release_version }} --output ./publish-api
      
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: ./publish-api
          push: true
          tags: docker.io/${{ inputs.image_name }}:${{ inputs.release_version }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: SUMMARY
        run: |
          echo "Docker image:" >> $GITHUB_STEP_SUMMARY
          echo "${{ inputs.image_name }}:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY







  
