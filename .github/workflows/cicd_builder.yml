name: CI/CD Main Pipeline

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      service_type:
        required: false
        type: string
      build_folder:
        required: false
        type: string
      deploy_contur:
        required: false
        type: string
      build_version:
        required: false
        type: string
      repository_name:
        required: true
        type: string
      release_version:
        required: false
        type: string
      commit_message:
        required: false
        type: string      
      image_name:
        required: true
        type: string
      image:
        required: false
        type: string
        default: ubuntu-latest
        
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      AUTH_TOKEN:
        required: true
      TELEGRAM_NOTIFICATION_TOKEN:
        required: false
      TELEGRAM_GITHAB_CHAT_ID:
        required: false
      SSH_KEY_FOR_DEPLOY:
        required: true
      SSH_ACCESS_ALPHA_01:
        required: true
      SSH_ACCESS_BETA_01:
        required: true
      SSH_ACCESS_BETA_04:
        required: true
      SSH_ACCESS_DEMO_01:
        required: true
        
jobs:         
#-------------- TEST RUST ----------------#
  test-rust:
    if: ${{ inputs.language == 'rust' && github.event_name != 'release' && github.event.action != 'published' && inputs.build_version == '' }}
    runs-on: ${{ inputs.image }}
    name: "[RUST] Test code"
    steps:
      - uses: actions/checkout@v4

      # - name: Check dump all context
      #   uses: crazy-max/ghaction-dump-context@v2

      - name: Cache cargo build
        if: ${{ inputs.deploy_contur != 'beta' && inputs.deploy_contur != 'demo' }}
        uses: actions/cache@v3
        with:
          path: |
            target
            .cargo
          key: ${{ runner.os }}-cargo-test-${{ inputs.repository_name }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
      - run: openssl version  

      - name: Start cargo test
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: test

#-------------- TEST C# ----------------#
  test-csharp:
    if: ${{ inputs.language == 'csharp' && github.event_name != 'release' && github.event.action != 'published' && inputs.build_version == '' }}
    runs-on: ${{ inputs.image }}
    name: "[C#] Test code"
    steps:
      - uses: actions/checkout@v3  

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.*
          source-url: https://nuget.pkg.github.com/my-prop-trading/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Start csharp test
        run: |
          dotnet build
          dotnet test

#-------------- Send ERROR notification ----------------#
  notify-telegram-error:
    needs: [test-rust, test-csharp, build-rust, build-csharp, deploy-on-server]
    runs-on: ${{ inputs.image }}
    name: "Send ERROR notification"
    if: failure()
    steps:
      - uses: actions/checkout@v3  
      
      - name: Get last commit message
        id: get_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Send error notification
        run: |
          user="Triggered by: ${{ github.actor }}"
          # reason="Last commit: ${{ github.event.head_commit.message }}"
          reason="Last commit: ${{ env.COMMIT_MESSAGE }}"
          date="Date: $(date -d "+2 hours" +"%d.%m.%Y %H:%M:%S")"
          pipeline_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
          needs_json='${{ toJSON(needs) }}'
          failed_jobs=()
          
          while IFS= read -r job; do
            failed_jobs+=("$job")
          done < <(echo "$needs_json" | jq -r 'to_entries[] | select(.value.result == "failure") | .key')
          
          if [[ ${#failed_jobs[@]} -gt 0 ]]; then
            job_names=$(IFS=, ; echo "${failed_jobs[*]}")
            echo "Failed job names: $job_names"
    
            curl --request POST --header "Content-Type: application/json" \
              --data "{\"text\":\"[ERROR] GitHub CICD Info:\n\n >>>   $job_names\n\n Project: ${{ inputs.repository_name }}\n $user\n $reason\n $date\n\n Please check action here:\n\n ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFICATION_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_GITHAB_CHAT_ID }}"
          else
            echo "No jobs failed."
          fi
          
#-------------- BUILD RUST ----------------#
  build-rust:
    if: ${{ (inputs.language == 'rust' && github.event_name == 'release' && github.event.action == 'published') || (inputs.language == 'rust' && inputs.build_version != '') }}
    runs-on: ${{ inputs.image }}
    name: "[RUST] Build code"
    steps:
      - uses: actions/checkout@v4

      # - name: Check dump all context
      #   uses: crazy-max/ghaction-dump-context@v2

      - name: Get release version
        id: get_version
        run: |
          if [ -z "${{ inputs.build_version }}" ]; then
            VERSION="${{ inputs.release_version }}"
          else
            VERSION="${{ inputs.build_version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"
        
      - name: Cache cargo build
        if: ${{ inputs.deploy_contur != 'beta' && inputs.deploy_contur != 'demo' }}
        uses: actions/cache@v3
        with:
          path: |
            target
            .cargo
          key: ${{ runner.os }}-cargo-build-${{ inputs.repository_name }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Update version in Cargo.toml
        run: sed -i -e 's/^version = .*/version = "${{ env.VERSION }}"/' Cargo.toml

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
      - run: openssl version

      # Install dependencies
      - run: sudo apt update
        continue-on-error: true
      - run: sudo apt install -y build-essential libglib2.0-dev pkg-config libssl-dev libgtk-3-dev
      - run: sudo apt update && sudo apt upgrade -y
        continue-on-error: true
      - run: sudo apt-get install javascriptcoregtk-4.1 libsoup-3.0 webkit2gtk-4.1 -y

      - name: Build project
        run: cargo build --release

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: .
          registry: docker.io
          repository: ${{ inputs.image_name }}
          tags: ${{ env.VERSION }}
          
  #-------------- BUILD C# ----------------#
  build-csharp:
    if: ${{ (inputs.language == 'csharp' && github.event_name == 'release' && github.event.action == 'published') || (inputs.language == 'csharp' && inputs.build_version != '') }}
    runs-on: ${{ inputs.image }}
    name: "[C#] Build code"
    steps:
      - uses: actions/checkout@v4

      - name: Get release version
        id: get_version
        run: |
          if [ -z "${{ inputs.build_version }}" ]; then
            VERSION="${{ inputs.release_version }}"
          else
            VERSION="${{ inputs.build_version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          VERSION_RC=$(echo $VERSION | sed 's/-.*//')
          echo "VERSION-RC=$VERSION_RC" >> $GITHUB_ENV
          echo "Using version: $VERSION"
          echo "Using version for AssemblyVersion: $VERSION_RC"
          
      - name: Change version in config file
        run: |
          cd ${{ inputs.build_folder }}
          ver=${{ env.VERSION-RC }}
          sed -i "s|<Version>.*|<Version>${ver}<\/Version>|g" ${{ inputs.build_folder }}.csproj
          cat ${{ inputs.build_folder }}.csproj
          
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.*
          source-url: https://nuget.pkg.github.com/my-prop-trading/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
  
      - name: Restore microservice
        run: dotnet restore
        continue-on-error: true
  
      - name: Build microservice
        run: dotnet build --no-restore --configuration Release /p:AssemblyVersion=${{ env.VERSION-RC }}
  
      - name: Publish microservice
        run: dotnet publish ./${{ inputs.build_folder }}/${{ inputs.build_folder }}.csproj --configuration Release /p:AssemblyVersion=${{ env.VERSION-RC }} --output ./publish-api
  
      - name: Check Service dir
        run: ls -la ./publish-api
          
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: ./publish-api
          registry: docker.io
          repository: ${{ inputs.image_name }}
          tags: ${{ env.VERSION }}

  #-------------- DEPLOY TO SERVER ----------------#
  deploy-on-server:
    needs: [ build-csharp, build-rust ]
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    runs-on: ${{ inputs.image }}
    name: "Deploy on server"
    steps:
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY_FOR_DEPLOY }}
          
      # - name: Check dump all context
      #   uses: crazy-max/ghaction-dump-context@v2

      - name: Get release version
        id: get_version
        run: |
          if [ -z "${{ inputs.build_version }}" ]; then
            VERSION="${{ inputs.release_version }}"
          else
            VERSION="${{ inputs.build_version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Deploy to ALPHA
        if: ${{ inputs.deploy_contur != 'beta' && inputs.deploy_contur != 'demo' && inputs.service_type == 'server' }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_ACCESS_ALPHA_01 }} << 'EOF'
            echo "------------ Starting deployment... ------------"
            cd ~/docker-infrastructure/microservices/${{ inputs.repository_name }}
            git pull
            # reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ inputs.build_version }}|g"
            reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ env.VERSION }}|g"
            echo $reg
            echo "---------------------------------------"
            find . -type f -name "*.*ml" -exec sed -i -r $reg {} \;
            cat docker-compose.yaml
            docker-compose up -d
            if git status | grep -q modified; then
              # git commit -a -m "Update ${{ inputs.repository_name }}:${{ inputs.build_version }}"
              git commit -a -m "Update ${{ inputs.repository_name }}:${{ env.VERSION }}"
              git push
            fi
            echo "------------ Finished deployment ! ------------"
          EOF

      - name: API Deploy to ALPHA
        if: ${{ inputs.deploy_contur != 'beta' && inputs.deploy_contur != 'demo' && inputs.service_type == 'api' }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_ACCESS_ALPHA_01 }} << 'EOF'
            echo "------------ Starting API deployment... ------------"
            cd ~/docker-infrastructure/microservices/${{ inputs.repository_name }}
            git pull
            # reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ inputs.build_version }}|g"
            reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ env.VERSION }}|g"
            echo $reg
            echo "---------------------------------------"
            find . -type f -name "*.*ml" -exec sed -i -r $reg {} \;
            cat docker-compose.yaml
            docker-compose up -d
            if git status | grep -q modified; then
              # git commit -a -m "Update ${{ inputs.repository_name }}:${{ inputs.build_version }}"
              git commit -a -m "Update ${{ inputs.repository_name }}:${{ env.VERSION }}"
              git push
            fi
            echo "------------ Finished API deployment ! ------------"
          EOF

      - name: Deploy to BETA
        if: ${{ inputs.deploy_contur == 'beta' && inputs.service_type == 'server' }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_ACCESS_BETA_01 }} << 'EOF'
            echo "------------ Starting deployment... ------------"
            cd ~/docker-infrastructure/microservices/${{ inputs.repository_name }}
            # reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ inputs.build_version }}|g"
            reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ env.VERSION }}|g"
            echo $reg
            echo "---------------------------------------"
            find . -type f -name "*.*ml" -exec sed -i -r $reg {} \;
            cat docker-compose.yaml
            docker-compose up -d
            echo "------------ Finished deployment ! ------------"
          EOF

      - name: API Deploy to BETA
        if: ${{ inputs.deploy_contur == 'beta' && inputs.service_type == 'api' }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_ACCESS_BETA_04 }} << 'EOF'
            echo "------------ Starting API deployment... ------------"
            cd ~/docker-infrastructure/microservices/${{ inputs.repository_name }}
            # reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ inputs.build_version }}|g"
            reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ env.VERSION }}|g"
            echo $reg
            echo "---------------------------------------"
            find . -type f -name "*.*ml" -exec sed -i -r $reg {} \;
            cat docker-compose.yaml
            docker-compose up -d
            echo "------------ Finished API deployment ! ------------"
          EOF

      - name: Deploy to DEMO
        if: ${{ inputs.deploy_contur == 'demo' && inputs.service_type == 'server' }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_ACCESS_DEMO_01 }} << 'EOF'
            echo "------------ Starting deployment... ------------"
            cd ~/docker-infrastructure/microservices/${{ inputs.repository_name }}
            # reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ inputs.build_version }}|g"
            reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ env.VERSION }}|g"
            echo $reg
            echo "---------------------------------------"
            find . -type f -name "*.*ml" -exec sed -i -r $reg {} \;
            cat docker-compose.yaml
            docker-compose up -d
            echo "------------ Finished deployment ! ------------"
          EOF

      - name: API Deploy to DEMO
        if: ${{ inputs.deploy_contur == 'demo' && inputs.service_type == 'api' }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_ACCESS_DEMO_01 }} << 'EOF'
            echo "------------ Starting API deployment... ------------"
            cd ~/docker-infrastructure/microservices/${{ inputs.repository_name }}
            # reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ inputs.build_version }}|g"
            reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ env.VERSION }}|g"
            echo $reg
            echo "---------------------------------------"
            find . -type f -name "*.*ml" -exec sed -i -r $reg {} \;
            cat docker-compose.yaml
            docker-compose up -d
            echo "------------ Finished API deployment ! ------------"
          EOF
      # - name: Send Telegram Notification
      #   env:
      #     TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_NOTIFICATION_TOKEN }}
      #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_GITHAB_CHAT_ID }}
      #   run: |
      #     curl -X POST \
      #     https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
      #     -d chat_id=$TELEGRAM_CHAT_ID \
      #     -d text="Deployment successful for ${{ inputs.repository_name }}:${{ inputs.build_version }}"


  
