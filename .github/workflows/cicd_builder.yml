name: CI/CD Main Pipeline

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      service_type:
        required: false
        type: string
      build_folder:
        required: false
        type: string
      active_branch:
        required: true
        type: string
      build_version:
        required: false
        type: string
      repository_name:
        required: true
        type: string
      release_version:
        required: false
        type: string
      image_name:
        required: true
        type: string
      image:
        required: false
        type: string
        default: ubuntu-latest
        
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      AUTH_TOKEN:
        required: true
      TELEGRAM_NOTIFICATION_TOKEN:
        required: false
      TELEGRAM_GITHAB_CHAT_ID:
        required: false

jobs:

# #-------------- CLEAR CARGO CACHE ----------------#
#   clear-rust-cache:
#     if: ${{ inputs.language == 'rust' && inputs.clear_cache == 'yes' }}
#     runs-on: ${{ inputs.image }}
#     steps:
#       - name: Generate New Cache Key for Build
#         id: new-build-cache-key
#         run: echo "NEW_BUILD_CACHE_KEY=$(date +%s)-build" >> $GITHUB_ENV

#       - name: Generate New Cache Key for Test
#         id: new-test-cache-key
#         run: echo "NEW_TEST_CACHE_KEY=$(date +%s)-test" >> $GITHUB_ENV

#       - name: Create empty cache for Build
#         uses: actions/cache@v3
#         with:
#           path: |
#             target/release
#             .cargo
#           key: ${{ env.NEW_BUILD_CACHE_KEY }}
#           restore-keys: |
#             ${{ runner.os }}-cargo-build-${{ inputs.repository_name }}-

#       - name: Create empty cache for Test
#         uses: actions/cache@v3
#         with:
#           path: |
#             target
#             .cargo
#           key: ${{ env.NEW_TEST_CACHE_KEY }}
#           restore-keys: |
#             ${{ runner.os }}-cargo-test-${{ inputs.repository_name }}-
         
#-------------- TEST RUST ----------------#
  test-rust:
    #if: ${{ inputs.language == 'rust' && github.event_name != 'release' && github.event.action != 'published' || inputs.language == 'rust' && inputs.build_version == '' }}
    if: ${{ inputs.language == 'rust' && github.event_name != 'release' && github.event.action != 'published' && inputs.build_version == '' }}
    runs-on: ${{ inputs.image }}
    name: "[RUST] Test code"
    outputs:
      rust-status: ${{ job.status }}

    steps:
      - uses: actions/checkout@v4

      # - name: Check dump all context
      #   uses: crazy-max/ghaction-dump-context@v2

      - name: Cache cargo build
        if: ${{ inputs.active_branch != 'main' && inputs.active_branch != 'beta' }}
        uses: actions/cache@v3
        with:
          path: |
            target
            .cargo
          key: ${{ runner.os }}-cargo-test-${{ inputs.repository_name }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
          # key: ${{ runner.os }}-cargo-build-${{ inputs.repository_name }}-${{ inputs.active_branch }}-${{ inputs.release_version }}-${{ hashFiles('**/Cargo.toml') }}
          # restore-keys: |
          #   ${{ runner.os }}-cargo-build-${{ inputs.repository_name }}-${{ inputs.active_branch }}-
          #   ${{ runner.os }}-cargo-build-${{ inputs.repository_name }}-
          #   ${{ runner.os }}-cargo-build-

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
      - run: openssl version  

      - name: Start cargo test
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: test

#-------------- TEST C# ----------------#
  test-csharp:
    if: ${{ inputs.language == 'csharp' && github.event_name != 'release' }}
    runs-on: ${{ inputs.image }}
    name: "[C#] Test code"
    outputs:
      csharp-status: ${{ job.status }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.*
          source-url: https://nuget.pkg.github.com/my-prop-trading/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Start csharp test
        run: |
          dotnet build
          dotnet test

#-------------- Send ERROR test notification ----------------#
  notify-telegram-test-error:
    needs: [test-rust, test-csharp]
    runs-on: ${{ inputs.image }}
    name: "Send ERROR test notification"
    if: failure()
    steps:
      - name: Send test error notification
        run: |
          user="Triggered by: ${{ github.actor }}"
          reason="Last commit: ${{ github.event.head_commit.message }}"
          date="Date: $(date -d "+2 hours" +"%d.%m.%Y %H:%M:%S")"
          pipeline_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
          # send Telegram notification:
          curl --request POST --header "Content-Type: application/json" \
            --data "{\"text\":\"[${{ inputs.language }}] Test error:\n\n>>>  ${{ inputs.repository_name }}\n\n $user\n $reason\n $date\n\n Please check action here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFICATION_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_GITHAB_CHAT_ID }}"

#-------------- BUILD RUST ----------------#
  build-rust:
    if: ${{ inputs.language == 'rust' && github.event_name == 'release' && github.event.action == 'published' || inputs.language == 'rust' && inputs.build_version != '' }}
    runs-on: ${{ inputs.image }}
    name: "[RUST] Build code"
    steps:
      - uses: actions/checkout@v4

      # - name: Check dump all context
      #   uses: crazy-max/ghaction-dump-context@v2
      
      # - name: Get release version
      #   id: get_version
      #   run: echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV

      - name: Get release version
        id: get_version
        run: |
          if [ -z "${{ inputs.build_version }}" ]; then
            VERSION="${{ inputs.release_version }}"
          else
            VERSION="${{ inputs.build_version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Get last commit message
        id: get_commit
        run: echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Set workflow display name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BUILD_VERSION=${{ inputs.build_version }}
          echo "BUILD_VERSION: $BUILD_VERSION"
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | tr -d '\n')
          NEW_NAME="${BUILD_VERSION} - ${COMMIT_MESSAGE}"
          curl -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            -d "{\"name\": \"${NEW_NAME}\"}"
        
      - name: Cache cargo build
        if: ${{ inputs.active_branch != 'main' && inputs.active_branch != 'beta' }}
        uses: actions/cache@v3
        with:
          path: |
            target
            .cargo
          # key: ${{ runner.os }}-cargo-build-${{ inputs.repository_name }}-${{ hashFiles('**/Cargo.toml') }}
          key: ${{ runner.os }}-cargo-build-${{ inputs.repository_name }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # - name: Get release version
      #   id: get_version
      #   run: echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV

      - name: Update version in Cargo.toml
        run: sed -i -e 's/^version = .*/version = "${{ env.VERSION }}"/' Cargo.toml

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
      - run: openssl version

      # Install dependencies
      - run: sudo apt update
        continue-on-error: true
      - run: sudo apt install -y build-essential libglib2.0-dev pkg-config libssl-dev libgtk-3-dev
      - run: sudo apt update && sudo apt upgrade -y
        continue-on-error: true
      - run: sudo apt-get install javascriptcoregtk-4.1 libsoup-3.0 webkit2gtk-4.1 -y

      - name: Build project
        run: cargo build --release

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: .
          registry: docker.io
          repository: ${{ inputs.image_name }}
          tags: docker.io/${{ inputs.image_name }}:${{ env.VERSION }}
          
  #-------------- BUILD C# ----------------#
  build-csharp:
    if: ${{ inputs.language == 'csharp' && github.event_name == 'release' && github.event.action == 'published' }}
    runs-on: ${{ inputs.image }}
    name: "[C#] Build code"
    steps:
      - uses: actions/checkout@v4

      - name: Get release version
        id: get_version
        run: |
          echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV
          echo "VERSION-RC=$(echo ${{ inputs.release_version }} | sed 's/-.*//')"  >> $GITHUB_ENV
          
      - name: Change version in config file
        run: |
          cd ${{ inputs.build_folder }}
          ver=${{ env.VERSION-RC }}
          sed -i "s|<Version>.*|<Version>${ver}<\/Version>|g" ${{ inputs.build_folder }}.csproj
          cat ${{ inputs.build_folder }}.csproj
          
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.*
          source-url: https://nuget.pkg.github.com/my-prop-trading/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
  
      - name: Restore microservice
        run: dotnet restore
        continue-on-error: true
  
      - name: Build microservice
        run: dotnet build --no-restore --configuration Release /p:AssemblyVersion=${{ env.VERSION-RC }}
  
      - name: Publish microservice
        run: dotnet publish ./${{ inputs.build_folder }}/${{ inputs.build_folder }}.csproj --configuration Release /p:AssemblyVersion=${{ env.VERSION-RC }} --output ./publish-api
  
      - name: Check Service dir
        run: ls -la ./publish-api
          
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          path: ./publish-api
          registry: docker.io
          repository: ${{ inputs.image_name }}
          tag_with_ref: true





  
