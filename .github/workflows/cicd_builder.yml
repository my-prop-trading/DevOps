name: CI/CD Main Pipeline

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
      repository_name:
        required: true
        type: string
      release_version:
        required: false
        type: string
      image:
        required: false
        type: string
        default: ubuntu-latest

    secrets:
      TELEGRAM_NOTIFICATION_TOKEN:
        required: false
      TELEGRAM_GITHAB_CHAT_ID:
        required: false

#-------------- TEST RUST ----------------#
jobs:
  test-rust:
    # if: ${{ inputs.language == 'rust' }}
    # if: ${{ inputs.language == 'rust' }} && github.event_name != 'release'
    if: ${{ inputs.language == 'rust' && github.event_name != 'release' }}
    runs-on: ${{ inputs.image }}
    name: "[RUST] Test code"
    outputs:
      rust-status: ${{ job.status }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
      - run: openssl version  

      - name: Start cargo test
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: test

#-------------- TEST C# ----------------#
  test-csharp:
    # if: ${{ inputs.language == 'csharp' }}
    # if: ${{ inputs.language == 'csharp' }} && github.event_name != 'release'
    if: ${{ inputs.language == 'csharp' && github.event_name != 'release' }}
    runs-on: ${{ inputs.image }}
    name: "[C#] Test code"
    outputs:
      csharp-status: ${{ job.status }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.*'

      - name: Start csharp test
        run: |
          dotnet build
          dotnet test

#-------------- Send ERROR test notification ----------------#
  notify-telegram-test-error:
    needs: [test-rust, test-csharp]
    runs-on: ${{ inputs.image }}
    name: "Send ERROR test notification"
    if: failure()
    steps:
      - name: Send test error notification
        run: |
          user="Triggered by: ${{ github.actor }}"
          reason="Last commit: ${{ github.event.head_commit.message }}"
          date="Date: $(date -d "+2 hours" +"%d.%m.%Y %H:%M:%S")"
          pipeline_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
          # send Telegram notification:
          curl --request POST --header "Content-Type: application/json" \
            --data "{\"text\":\"[${{ inputs.language }}] Test error:\n\n>>>  ${{ inputs.repository_name }}\n\n $user\n $reason\n $date\n\n Please check action here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFICATION_TOKEN }}/sendMessage?chat_id=${{ secrets.TELEGRAM_GITHAB_CHAT_ID }}"

#-------------- BUILD RUST ----------------#
  build-rust:
    # if: ${{ inputs.language == 'rust' }}
    # if: ${{ inputs.language == 'rust' && inputs.release_version != '' }}
    if: ${{ inputs.language == 'rust' && github.event_name == 'release' && github.event.action == 'published' }}
    runs-on: ${{ inputs.image }}
    name: "[RUST] Build code"
    # needs: release_trigger
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Get the version
        id: get_version
        run: echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV

      - name: Update version in Cargo.toml
        run: sed -i -e 's/^version = .*/version = "${{ env.VERSION }}"/' Cargo.toml

      - name: Install dependencies
        run: |
          sudo apt update -y
          sudo apt install -y build-essential libglib2.0-dev pkg-config libssl-dev libgtk-3-dev javascriptcoregtk-4.1 libsoup-3.0 webkit2gtk-4.1

      # - name: Cache Rust dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-

      - name: Build project
        run: cargo build --release

      - name: Set up Docker and login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ inputs.image_name }}:${{ env.VERSION }} .
          docker push ${{ inputs.image_name }}:${{ env.VERSION }}

      - name: Summary
        run: |
          echo "Docker image: ${{ inputs.image_name }}:${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
