name: .NET build

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
      release_version:
        required: true
        type: string
      image_name:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      AUTH_TOKEN:
        required: true
      TELEGRAM_TO:
        required: false
      TELEGRAM_TOKEN:
        required: false

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${{ inputs.release_version }}
        
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.*
        source-url: https://nuget.pkg.github.com/myproptrading/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Restore
      run: dotnet restore
      continue-on-error: true

    - name: Build microservice
      run: dotnet build --no-restore --configuration Release /p:AssemblyVersion=${{ inputs.release_version }}

    - name: Test microservice
      run: dotnet test --no-build --configuration Release

    - name: Publish Service
      run: dotnet publish ./${{ inputs.repository_name }}/${{ inputs.repository_name }}.csproj --configuration Release /p:AssemblyVersion=${{ inputs.release_version }} --output ./publish-api

    - name: Check Service dir
      run: ls ./publish-api

    - id: string
      uses: ASzc/change-string-case-action@v1
      with:
        string: ${{ inputs.repository_name }}
        
    - name: Publish image azure
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        path: ./publish-api
        registry: docker.io
        repository: myproptrading/${{ steps.string.outputs.lowercase }}
        tag_with_ref: true
  
  docker-deploy:
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${{ inputs.release_version }}
        
    - name: get uat docker yamls
      uses: actions/checkout@v3
      with:
        repository: my-prop-trading/docker-infrastructure
        ref: main
        token: ${{ secrets.AUTH_TOKEN }}
    - run: |
        reg=s"/backoffice:[0-9].*/backoffice:${{ steps.get_version.outputs.VERSION }}/g"
        echo $reg
        find . -type f -name "*.*ml" -exec sed -i -r $reg {} \;
        git config user.name github-actions
        git config user.email github-actions@github.com
        if git status | grep -q modified; then git commit -a -m "Update ${{ inputs.repository_name }}:${{ steps.get_version.outputs.VERSION }}" && git push; fi


  notify:
    name: notify release
    needs: [build, docker-deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:

      - id: secrets
        run: |
          echo HAS_TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN != '' }} >> $GITHUB_OUTPUT

      - name: Version
        shell: bash
        run: echo VERSION=${{ inputs.release_version }} >> $GITHUB_ENV

      - name: Timestamp
        shell: bash
        run: |
          TIMESTAMP=${{ inputs.build_timestamp }}
          if [[ -z ${TIMESTAMP} ]]; then
            TIMESTAMP=$(date --utc +'%F %H:%M')
          fi
          echo TIMESTAMP=${TIMESTAMP} >> $GITHUB_ENV
          
      - name: Telegram Notify
        if: steps.secrets.outputs.HAS_TELEGRAM_TOKEN == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: html
          message: |
            <b>Released:</b> <i>${{ inputs.repository_name }}</i>. 
            <b>Version:</b> <i>${{ env.VERSION }}</i>
            <b>Date:</b> <i>${{ env.TIMESTAMP }} UTC</i>
            ---
            <b>Release Name:</b> <i>${{ github.event.release.name }}</i>
            <b>Release body:</b> <i>${{ github.event.release.body }}</i>
            ---
            <b>ID:</b> <i>${{ github.run_id }}</i>
            <b>Actor:</b> <tg-spoiler>${{ github.actor }}</tg-spoiler>
