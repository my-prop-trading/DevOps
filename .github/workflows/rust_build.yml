name: Cargo build

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
      release_version:
        required: true
        type: string
      image_name:
        required: true
        type: string
      release_name:
        required: false
        type: string
        default: None
      release_body:
        required: false
        type: string
        default: None
      runs_on:
        required: false
        type: string
        default: ubuntu-22.04

    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      AUTH_TOKEN:
        required: true
      TELEGRAM_TO:
        required: false
      TELEGRAM_TOKEN:
        required: false


jobs:
  build:
    runs-on: ${{ inputs.runs_on }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Get the version
        id: get_version
        run: echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_OUTPUT

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          # path: |
          #   target
          #   .cargo
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          # key: ${{ runner.os }}-cargo-build-${{ inputs.repository_name }}
          # restore-keys: |
          #   ${{ runner.os }}-cargo-build-
          key: ${{ runner.os }}-cargo-build-${{ github.event_name == 'release' && github.event.release.target_commitish || github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable        
        
      - name: Updating version
        run: sed -i -e 's/^version = .*/version = "${{ steps.get_version.outputs.VERSION }}"/' Cargo.toml

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
      - run: openssl version

      - run: echo $LD_LIBRARY_PATH
      
      # - name: Install
      #   if: ${{ inputs.runs_on }} == "ubuntu-22.04"
      #   uses: awalsh128/cache-apt-pkgs-action@latest
      #   with:
      #     packages: build-essential libglib2.0-dev pkg-config libssl-dev libgtk-3-dev javascriptcoregtk-4.1 libsoup-3.0 webkit2gtk-4.1 protobuf-compiler

      # - run: sudo apt update || true
      #   continue-on-error: true
      # - run: sudo apt install -y build-essential libglib2.0-dev pkg-config libssl-dev libgtk-3-dev
      # - run: sudo apt update
      #   continue-on-error: true
      # - run: sudo apt upgrade -y
      #   continue-on-error: true
      # - run: sudo apt-get install javascriptcoregtk-4.1 libsoup-3.0 webkit2gtk-4.1 -y

      # - name: Set up cargo cache
      #   uses: actions/cache@v3
      #   continue-on-error: false
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       target/
      #     key: ${{ inputs.runs_on }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: ${{ inputs.runs_on }}-cargo-

      - run: cargo build --release

      - name: Docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
        run: |          
          echo "$DOCKER_PASS" | docker login --username "$DOCKER_USER" --password-stdin   
      - name: Docker Build and Publish
        run: |          
          docker build -t ${{ inputs.image_name }}:${{ steps.get_version.outputs.VERSION }} .
          docker push ${{ inputs.image_name }}:${{ steps.get_version.outputs.VERSION }}
          
      - name: SUMMARY
        run: |
          echo "Docker image:" >> $GITHUB_STEP_SUMMARY
          echo "${{ inputs.image_name }}:${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
  
  docker-deploy:
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Get the version
      id: get_version
      run: echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_OUTPUT
        
    - name: get uat docker yamls
      uses: actions/checkout@v4
      with:
        repository: my-prop-trading/docker-infrastructure
        ref: main
        token: ${{ secrets.AUTH_TOKEN }}
    - name: Git Push
      run: |
        pwd
        ls -la
        reg=s"|/${{ inputs.repository_name }}:[0-9].*|/${{ inputs.repository_name }}:${{ steps.get_version.outputs.VERSION }}|g"
        echo $reg
        find . -type f -name "*.*ml" -exec sed -i -r $reg {} \;
        git config user.name github-actions
        git config user.email github-actions@github.com
        if git status | grep -q modified; then git commit -a -m "Update ${{ inputs.repository_name }}:${{ steps.get_version.outputs.VERSION }}" && git push; fi
# ------------- look to https://github.com/my-prop-trading/docker-infrastructure/blob/main/.github/workflows/deploy_microservices.yml
  notify:
    name: notify release
    needs: [build, docker-deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:

      - id: secrets
        run: |
          echo HAS_TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN != '' }} >> $GITHUB_OUTPUT

      - name: Get the version
        id: get_version
        run: echo "VERSION=${{ inputs.release_version }}" >> $GITHUB_OUTPUT

      - name: Timestamp
        shell: bash
        id: time_data
        run: |
          TIMESTAMP=${{ inputs.build_timestamp }}
          if [[ -z ${TIMESTAMP} ]]; then
            TIMESTAMP=$(date --utc +'%F %H:%M')
          fi
          echo TIMESTAMP=${TIMESTAMP} >> $GITHUB_OUTPUT
          
      - name: Telegram Notify
        if: steps.secrets.outputs.HAS_TELEGRAM_TOKEN == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: html
          message: |
            <b>Released:</b> <i>${{ inputs.repository_name }}</i>. 
            <b>Version:</b> <i>${{ steps.get_version.outputs.VERSION }}</i>
            <b>Date:</b> <i>${{ steps.time_data.outputs.TIMESTAMP }} UTC</i>
            ---
            <b>Release Name:</b> <i>${{ github.event.release.name }}</i>
            <b>Release body:</b> <i>${{ github.event.release.body }}</i>
            <b>Jira Version:</b> <code>${{ inputs.image_name }}:${{ steps.get_version.outputs.VERSION }}</code>
            ---
            <b>ID:</b> <i>${{ github.run_id }}</i>
            <b>Actor:</b> <tg-spoiler>${{ github.actor }}</tg-spoiler>
            
